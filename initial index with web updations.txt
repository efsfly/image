<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JPEG Optimizer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', sans-serif;
            background: #f7f7f7;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        header {
            background: #1c1c1c;
            color: white;
            padding: 15px;
            text-align: center;
        }

        main {
            flex: 1;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }

        .upload-section {
            background: white;
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            margin: 20px 0;
            position: relative;
            min-height: 250px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        #fileInput {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            top: 0;
            left: 0;
            cursor: pointer;
        }

        .preset-bar {
            display: flex;
            gap: 10px;
            margin: 20px 0;
            justify-content: center;
            flex-wrap: wrap;
        }

        .preset-btn {
            padding: 10px 20px;
            border: 2px solid #0066b8;
            border-radius: 20px;
            background: white;
            color: #0066b8;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .preset-btn.active {
            background: #0066b8;
            color: white;
        }

        .file-list {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid #eee;
        }

        .download-btn {
            background: #0066b8;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 20px;
            cursor: pointer;
            margin: 20px auto;
            display: block;
        }

        .features {
            display: flex;
            gap: 20px;
            margin: 40px 0;
            justify-content: center;
            flex-wrap: wrap;
        }

        .feature-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            width: 280px;
            text-align: center;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        }
    </style>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3270423114390876"
     crossorigin="anonymous"></script>

</head>
<body>
    <header>
        <h1><i class="fas fa-compress-alt"></i> JPEG Optimizer</h1>
    </header>

    <main>
        <section class="upload-section" id="dropZone">
            <input type="file" id="fileInput" accept="image/jpeg" multiple>
            <div id="uploadPrompt">
                <i class="fas fa-cloud-upload-alt fa-3x" style="color:#0066b8;"></i>
                <h2>Click to Upload JPEG Files</h2>
                <p>Max file size: 20MB</p>
            </div>
            <div class="file-list" id="fileList"></div>
        </section>

        <div class="preset-bar">
            <button class="preset-btn active" data-quality="75">Balanced</button>
            <button class="preset-btn" data-quality="90">High Quality</button>
            <button class="preset-btn" data-quality="50">Max Compression</button>
        </div>

        <button class="download-btn" id="downloadAll" style="display: none;">
            <i class="fas fa-download"></i> Download Files
        </button>

        <section class="features">
            <div class="feature-card">
                <i class="fas fa-lock fa-2x"></i>
                <h3>Secure Processing</h3>
                <p>Files never leave your device</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-tachometer-alt fa-2x"></i>
                <h3>Fast Compression</h3>
                <p>Optimize images in seconds</p>
            </div>
        </section>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const fileInput = document.getElementById('fileInput');
            const fileList = document.getElementById('fileList');
            const downloadBtn = document.getElementById('downloadAll');
            const presets = document.querySelectorAll('.preset-btn');
            const MAX_SIZE = 20 * 1024 * 1024;
            
            let currentQuality = 75;
            let originalFiles = [];
            let compressedFiles = [];

            fileInput.addEventListener('change', handleFiles);
            
            presets.forEach(btn => btn.addEventListener('click', () => {
                presets.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentQuality = parseInt(btn.dataset.quality);
                if(originalFiles.length) processFiles(originalFiles);
            }));

            async function handleFiles(e) {
                const files = Array.from(e.target.files).filter(file => {
                    if(file.size > MAX_SIZE) {
                        alert(`File too large: ${file.name}`);
                        return false;
                    }
                    return true;
                });
                
                if(files.length === 0) return;
                
                originalFiles = files;
                await processFiles(files);
            }

            async function processFiles(files) {
                fileList.innerHTML = '';
                downloadBtn.style.display = 'none';

                files.forEach(file => {
                    const div = document.createElement('div');
                    div.className = 'file-item';
                    div.innerHTML = `
                        <span>${file.name}</span>
                        <div>
                            <span class="original-size">${formatBytes(file.size)}</span>
                            â†’ 
                            <span class="compressed-size">Processing...</span>
                        </div>
                    `;
                    fileList.appendChild(div);
                });

                compressedFiles = await Promise.all(files.map(async (file, index) => {
                    try {
                        const compressedBlob = await compressImage(file, currentQuality);
                        const compressedSize = formatBytes(compressedBlob.size);
                        fileList.children[index].querySelector('.compressed-size').textContent = compressedSize;
                        return { name: file.name, blob: compressedBlob };
                    } catch (error) {
                        console.error('Compression error:', error);
                        return null;
                    }
                }));

                compressedFiles = compressedFiles.filter(file => file !== null);
                downloadBtn.style.display = compressedFiles.length > 0 ? 'block' : 'none';
            }

            function compressImage(file, quality) {
                return new Promise((resolve, reject) => {
                    const img = new Image();
                    img.src = URL.createObjectURL(file);
                    
                    img.onload = () => {
                        const canvas = document.createElement('canvas');
                        canvas.width = img.width;
                        canvas.height = img.height;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0);
                        
                        canvas.toBlob(blob => {
                            if(!blob) reject('Compression failed');
                            resolve(blob);
                        }, 'image/jpeg', quality/100);
                    };
                    
                    img.onerror = () => reject('Image load error');
                });
            }

            downloadBtn.addEventListener('click', async () => {
                if(compressedFiles.length === 0) return;

                if(compressedFiles.length === 1) {
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(compressedFiles[0].blob);
                    link.download = `compressed-${compressedFiles[0].name}`;
                    link.click();
                } else {
                    const zip = new JSZip();
                    compressedFiles.forEach(file => {
                        zip.file(`compressed-${file.name}`, file.blob);
                    });
                    const content = await zip.generateAsync({ type: 'blob' });
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(content);
                    link.download = 'compressed-images.zip';
                    link.click();
                }
            });

            function formatBytes(bytes) {
                return (bytes/1024).toFixed(1) + ' KB';
            }
        });
    </script>
</body>
</html>